name: Run Rails Task

on:
  # Run this workflow from other workflows
  workflow_call:
    inputs:
      app_name:
        description: 'Name of app to get current k8s deployment'
        required: true
        type: string
      environment:
        description: 'environment to affect'
        required: true
        type: string
      task_name:
        description: 'environment to affect'
        required: true
        type: string
    secrets:
      creds:
        required: true
jobs:
  run_task:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0

      - name: Set the target AKS cluster
        uses: Azure/aks-set-context@v1
        with:
          creds: '${{ secrets.creds }}'
          cluster-name: microservices
          resource-group: kubernetes

      - name: Set environment variables
        run: |
          echo "DEPLOYED_IMAGE_TAG=$(kubectl get deployment ${{ inputs.app_name }}-${{ inputs.environment }}-app -o=jsonpath='{$.spec.template.spec.containers[:1].image}' | cut -d':' -f 2)" >> $GITHUB_ENV
          echo "JOB_NAME=${{ inputs.app_name }}-${{ inputs.environment }}-task-${{ github.run_number }}" >> $GITHUB_ENV

      - name: Modify & apply template
        run: |
          sed "s/__IMAGE_TAG__/$DEPLOYED_IMAGE_TAG/g" ./kubernetes/job-task-${{ inputs.environment }}.tmpl \
            | sed "s/__JOB_NAME__/$JOB_NAME/g" \
            | sed "s/__TASK_NAME__/${{ inputs.task_name }}/g" \
            | kubectl apply -f -

      - name: Wait for completion or failure
        run: |
          kubectl wait --for=condition=complete --timeout=86400s job/$JOB_NAME & completion_pid=$!
          kubectl wait --for=condition=failed --timeout=86400s job/$JOB_NAME && exit 1 & failure_pid=$!
          wait -n $completion_pid $failure_pid
          exit_code=$?
          echo "JOB_EXIT_CODE=$exit_code" >> $GITHUB_ENV
          exit $exit_code

      - name: Log output
        if: always()
        run: |
          echo "Job Description:"
          kubectl describe job/$JOB_NAME
          echo "Pod Logs:"
          kubectl logs $(kubectl get pods --selector=job-name=$JOB_NAME -o=jsonpath='{$.items[*].metadata.name}')

      - name: Clean up job if successful
        if: always()
        run: |
          if [ $JOB_EXIT_CODE -eq 0 ]
          then
            kubectl delete job $JOB_NAME
          fi
